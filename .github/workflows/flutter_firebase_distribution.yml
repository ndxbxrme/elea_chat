name: Build and Distribute

on:
  push:
    branches:
      - test
      - live

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest]

    environment: ${{ github.ref == 'refs/heads/live' && 'live' || 'test' }}

    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      ANDROID_FIREBASE_APP_ID: ${{ secrets.ANDROID_FIREBASE_APP_ID }}
      IOS_FIREBASE_APP_ID: ${{ secrets.IOS_FIREBASE_APP_ID }}
      ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/my-release-key.jks

    steps:
        
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Decode and import certificate
        if: matrix.os == 'macos-latest'
        env:
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          echo $IOS_CERTIFICATE | base64 --decode > ios_certificate.p12
          security create-keychain -p "" build.keychain
          security import ios_certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P $IOS_CERTIFICATE_PASSWORD -A
          security list-keychains -s ~/Library/Keychains/build.keychain
          security default-keychain -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "" ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain

      - name: Create Exportoptions.plist
        run:  |
          cat <<EOF > ios/Runner/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>destination</key>
              <string>export</string>
              <key>method</key>
              <string>ad-hoc</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>${{ secrets.DEVELOPMENT_TEAM_ID }}</string>
              <key>thinning</key>
              <string>&lt;none&gt;</string>
          </dict>
          </plist>
          EOF

      - name: Install provisioning profile
        if: matrix.os == 'macos-latest'
        env:
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        run: |
          echo $IOS_PROVISIONING_PROFILE | base64 --decode > provisioning_profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Set Development Team in Xcode project
        if: matrix.os == 'macos-latest'
        env:
          DEVELOPMENT_TEAM_ID: ${{ secrets.DEVELOPMENT_TEAM_ID }}
        run: |
          plutil -replace "objects.97C146E61CF9000F007C117D.attributes.TargetAttributes.1.DevelopmentTeam" -string "test" ios/Runner.xcodeproj/project.pbxproj
          plutil -replace "objects.97C146E61CF9000F007C117D.attributes.TargetAttributes.1.ProvisioningStyle" -string "Manual" ios/Runner.xcodeproj/project.pbxproj

