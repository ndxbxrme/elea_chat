name: Build and Distribute

on:
  push:
    branches:
      - test
      - live

jobs:
  build:
    runs-on: macos-latest

    environment: ${{ github.ref == 'refs/heads/live' && 'live' || 'test' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create firebase_options.dart
      run: |
        cat <<EOF > lib/firebase_options.dart
        import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
        import 'package:flutter/foundation.dart'
            show defaultTargetPlatform, kIsWeb, TargetPlatform;

        class DefaultFirebaseOptions {
          static FirebaseOptions get currentPlatform {
            switch (defaultTargetPlatform) {
              case TargetPlatform.android:
                return android;
              case TargetPlatform.iOS:
                return ios;
              default:
                throw UnsupportedError(
                  'DefaultFirebaseOptions are not supported for this platform.',
                );
            }
          }

          static const FirebaseOptions android = FirebaseOptions(
            apiKey: '${{ secrets.ANDROID_API_KEY }}',
            appId: '${{ secrets.ANDROID_FIREBASE_APP_ID }}',
            messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
            projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
            storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
          );

          static const FirebaseOptions ios = FirebaseOptions(
            apiKey: '${{ secrets.IOS_API_KEY }}',
            appId: '${{ secrets.IOS_FIREBASE_APP_ID }}',
            messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
            projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
            storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
            iosBundleId: '${{ secrets.IOS_BUNDLE_ID }}',
          );
        }

        EOF
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.3'

    - name: Install dependencies
      run: flutter pub get

    - name: Decrypt and install provisioning profile
      run: |
        echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > provisioning_profile.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

    - name: Decrypt and install certificate
      run: |
        echo "${{ secrets.IOS_CERTIFICATE }}" | base64 --decode > ios_certificate.p12
        security create-keychain -p "" build.keychain
        security import ios_certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -A
        security list-keychain -d user -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "" ~/Library/Keychains/build.keychain
        security set-keychain-settings -u ~/Library/Keychains/build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain


    - name: Install CocoaPods dependencies
      run: |
        cd ios
        pod install

    - name: Create Exportoptions.plist
      run:  |
        cat <<EOF > ios/Runner/ExportOptions.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>compileBitcode</key>
            <false/>
            <key>destination</key>
            <string>export</string>
            <key>method</key>
            <string>ad-hoc</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>com.eleaapp.elea</key>
                <string>Elea App Provisioning Profile - Dev</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
            <key>signingCertificate</key>
            <string>Martin McKee</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>teamID</key>
            <string>E39D5QKER3</string>
            <key>thinning</key>
            <string>&lt;none&gt;</string>
        </dict>
        </plist>
        EOF

    - name: Clean build folder
      run: flutter clean

    - name: Build iOS app
      run: flutter build ios --release --no-codesign

    - name: Archive iOS app
      run: |
        set -x
        xcodebuild -workspace ios/Runner.xcworkspace \
        -scheme Runner \
        -sdk iphoneos \
        -configuration Release \
        -archivePath $PWD/build/Runner.xcarchive \
        GCC_WARN_INHIBIT_ALL_WARNINGS=YES \
        archive | tee build.log | xcpretty --no-utf
        set +x

    - name: Export iOS app
      run: |
        set -x
        xcodebuild -exportArchive \
        -archivePath $PWD/build/Runner.xcarchive \
        -exportOptionsPlist ios/Runner/ExportOptions.plist \
        -exportPath $PWD/build \
        GCC_WARN_INHIBIT_ALL_WARNINGS=YES \
        | tee export.log | xcpretty --no-utf
        set +x