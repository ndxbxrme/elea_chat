name: Build and Distribute

on:
  push:
    branches:
      - test
      - live

jobs:
  build:
    runs-on: ubuntu-latest

    environment: ${{ github.ref == 'refs/heads/live' && 'live' || 'test' }}

    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      ANDROID_FIREBASE_APP_ID: ${{ secrets.ANDROID_FIREBASE_APP_ID }}
      IOS_FIREBASE_APP_ID: ${{ secrets.IOS_FIREBASE_APP_ID }}
      ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

    steps:
      - name: test keystore
        run: echo "${ANDROID_KEYSTORE}"
        
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Decode keystore
        run: echo "${ANDROID_KEYSTORE}" | base64 --decode > my-release-key.jks

      - name: Create firebase_options.dart
        run: |
          cat <<EOF > lib/firebase_options.dart
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart'
              show defaultTargetPlatform, kIsWeb, TargetPlatform;

          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                case TargetPlatform.iOS:
                  return ios;
                default:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions are not supported for this platform.',
                  );
              }
            }

            static const FirebaseOptions android = FirebaseOptions(
              apiKey: '${{ secrets.ANDROID_API_KEY }}',
              appId: '${{ secrets.ANDROID_FIREBASE_APP_ID }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
            );

            static const FirebaseOptions ios = FirebaseOptions(
              apiKey: '${{ secrets.IOS_API_KEY }}',
              appId: '${{ secrets.IOS_FIREBASE_APP_ID }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
              iosBundleId: '${{ secrets.IOS_BUNDLE_ID }}',
            );
          }

          EOF

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.5'

      - name: Build APK
        run: flutter build apk --release

      - name: Build iOS
        if: runner.os == 'macOS'
        run: flutter build ios --release

      - name: Distribute to Firebase App Distribution (Android)
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
            --app $ANDROID_FIREBASE_APP_ID \
            --token $FIREBASE_TOKEN \
            --groups testers

      - name: Distribute to Firebase App Distribution (iOS)
        if: runner.os == 'macOS'
        run: |
          firebase appdistribution:distribute build/ios/ipa/Runner.ipa \
            --app $IOS_FIREBASE_APP_ID \
            --token $FIREBASE_TOKEN \
            --groups testers
